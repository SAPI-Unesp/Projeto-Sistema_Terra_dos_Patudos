<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>